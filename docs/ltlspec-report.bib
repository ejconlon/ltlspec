@incollection{goos_automata-theoretic_1996,
  address   = {Berlin, Heidelberg},
  title     = {An automata-theoretic approach to linear temporal logic},
  volume    = {1043},
  isbn      = {978-3-540-60915-5 978-3-540-49675-5},
  url       = {http://link.springer.com/10.1007/3-540-60915-6_6},
  abstract  = {The automata-theoretic approach to linear temporal logic uses the theory of automata as a unifying paradigm for program speciﬁcation, veriﬁcation, and synthesis. Both programs and speciﬁcations are in essence descriptions of computations. These computations can be viewed as words over some alphabet. Thus, programs and speciﬁcations can be viewed as descriptions of languages over some alphabet. The automata-theoretic perspective considers the relationships between programs and their speciﬁcations as relationships between languages. By translating programs and speciﬁcations to automata, questions about programs and their speciﬁcations can be reduced to questions about automata. More speciﬁcally, questions such as satisﬁability of speciﬁcations and correctness of programs with respect to their speciﬁcations can be reduced to questions such as nonemptiness and containment of automata.},
  language  = {en},
  urldate   = {2021-10-03},
  booktitle = {Logics for {Concurrency}},
  publisher = {Springer Berlin Heidelberg},
  author    = {Vardi, Moshe Y.},
  editor    = {Goos, Gerhard and Hartmanis, Juris and Leeuwen, Jan and Moller, Faron and Birtwistle, Graham},
  year      = {1996},
  doi       = {10.1007/3-540-60915-6_6},
  note      = {Series Title: Lecture Notes in Computer Science},
  pages     = {238--266},
  file      = {Vardi - 1996 - An automata-theoretic approach to linear temporal .pdf:/Users/charolastra/Zotero/storage/BD7B9MCH/Vardi - 1996 - An automata-theoretic approach to linear temporal .pdf:application/pdf}
}

@article{coupet-grimal_axiomatization_2003,
  title    = {An {Axiomatization} of {Linear} {Temporal} {Logic} in the {Calculus} of {Inductive} {Constructions}},
  volume   = {13},
  issn     = {0955-792X, 1465-363X},
  url      = {https://academic.oup.com/logcom/article-lookup/doi/10.1093/logcom/13.6.801},
  doi      = {10.1093/logcom/13.6.801},
  abstract = {We present in this paper a shallow embedding of Linear Temporal Logic in the Calculus of Inductive Constructions. Our axiomatization is based on a co-inductive representation of program executions. Temporal operators are implemented as co-inductive (respectively inductive) types when they are greatest (respectively least) ﬁxpoints, and several generic lemmas are proved to allow elegant and efﬁcient reasoning in practical cases. This work results in several reusable libraries in the Coq proof-assistant.},
  language = {en},
  number   = {6},
  urldate  = {2021-10-03},
  journal  = {Journal of Logic and Computation},
  author   = {Coupet-Grimal, S.},
  month    = dec,
  year     = {2003},
  pages    = {801--813},
  file     = {Coupet-Grimal - 2003 - An Axiomatization of Linear Temporal Logic in the .pdf:/Users/charolastra/Zotero/storage/5Z3V2X66/Coupet-Grimal - 2003 - An Axiomatization of Linear Temporal Logic in the .pdf:application/pdf}
}

@incollection{bartocci_introduction_2018,
  address   = {Cham},
  title     = {Introduction to {Runtime} {Verification}},
  volume    = {10457},
  isbn      = {978-3-319-75631-8 978-3-319-75632-5},
  url       = {http://link.springer.com/10.1007/978-3-319-75632-5_1},
  abstract  = {The aim of this chapter is to act as a primer for those wanting to learn about Runtime Veriﬁcation (RV). We start by providing an overview of the main speciﬁcation languages used for RV. We then introduce the standard terminology necessary to describe the monitoring problem, covering the pragmatic issues of monitoring and instrumentation, and discussing extensively the monitorability problem.},
  language  = {en},
  urldate   = {2021-10-03},
  booktitle = {Lectures on {Runtime} {Verification}},
  publisher = {Springer International Publishing},
  author    = {Bartocci, Ezio and Falcone, Yliès and Francalanza, Adrian and Reger, Giles},
  editor    = {Bartocci, Ezio and Falcone, Yliès},
  year      = {2018},
  doi       = {10.1007/978-3-319-75632-5_1},
  note      = {Series Title: Lecture Notes in Computer Science},
  pages     = {1--33},
  file      = {Bartocci et al. - 2018 - Introduction to Runtime Verification.pdf:/Users/charolastra/Zotero/storage/IHJ9A3XL/Bartocci et al. - 2018 - Introduction to Runtime Verification.pdf:application/pdf}
}

@article{alpern_defining_1985,
  title    = {Defining liveness},
  volume   = {21},
  issn     = {00200190},
  url      = {https://linkinghub.elsevier.com/retrieve/pii/0020019085900560},
  doi      = {10.1016/0020-0190(85)90056-0},
  abstract = {A formal definition for liveness properties is proposed. It is argued that this definition captures the intuition that liveness properties stipulate that 'something good' eventually happens during execution. A topological characterization of safety and liveness is given. Every property is shown to be the intersection of a safety property and a liveness property.},
  language = {en},
  number   = {4},
  urldate  = {2021-10-03},
  journal  = {Information Processing Letters},
  author   = {Alpern, Bowen and Schneider, Fred B.},
  month    = oct,
  year     = {1985},
  pages    = {181--185},
  file     = {Alpern and Schneider - 1985 - Defining liveness.pdf:/Users/charolastra/Zotero/storage/UXSBJQ3Y/Alpern and Schneider - 1985 - Defining liveness.pdf:application/pdf}
}

@incollection{margaria_execution_2016,
  address   = {Cham},
  title     = {Execution {Trace} {Analysis} {Using} {LTL}-{FO} \$\${\textasciicircum}+\$\$},
  volume    = {9953},
  isbn      = {978-3-319-47168-6 978-3-319-47169-3},
  url       = {http://link.springer.com/10.1007/978-3-319-47169-3_26},
  abstract  = {We explore of use of the tool BeepBeep, a monitor for the temporal logic LTL-FO+, in interpreting assembly traces, focusing on security-related applications. LTL-FO+ is an extension of LTL, which includes ﬁrst order quantiﬁcation. We show that LTL-FO+ is a sufﬁciently expressive formalism to state a number of interesting program behaviors, and demonstrate experimentally that BeepBeep can efﬁciently verify the validity of the properties on assembly traces in tractable time.},
  language  = {en},
  urldate   = {2021-10-03},
  booktitle = {Leveraging {Applications} of {Formal} {Methods}, {Verification} and {Validation}: {Discussion}, {Dissemination}, {Applications}},
  publisher = {Springer International Publishing},
  author    = {Khoury, Raphaël and Hallé, Sylvain and Waldmann, Omar},
  editor    = {Margaria, Tiziana and Steffen, Bernhard},
  year      = {2016},
  doi       = {10.1007/978-3-319-47169-3_26},
  note      = {Series Title: Lecture Notes in Computer Science},
  pages     = {356--362},
  file      = {Khoury et al. - 2016 - Execution Trace Analysis Using LTL-FO \$\$^+\$\$.pdf:/Users/charolastra/Zotero/storage/N8FHRIMZ/Khoury et al. - 2016 - Execution Trace Analysis Using LTL-FO \$\$^+\$\$.pdf:application/pdf}
}

@inproceedings{mostafa_decentralized_2015,
  address   = {Hyderabad, India},
  title     = {Decentralized {Runtime} {Verification} of {LTL} {Specifications} in {Distributed} {Systems}},
  isbn      = {978-1-4799-8649-1},
  url       = {http://ieeexplore.ieee.org/document/7161537/},
  doi       = {10.1109/IPDPS.2015.95},
  abstract  = {Runtime veriﬁcation is a lightweight automated formal method for speciﬁcation-based runtime monitoring as well as testing of large real-world systems. While numerous techniques exist for runtime veriﬁcation of sequential programs, there has been very little work on speciﬁcation-based monitoring of distributed systems. In this paper, we propose the ﬁrst sound and complete method for runtime veriﬁcation of asynchronous distributed programs for the 3-valued semantics of LTL speciﬁcations deﬁned over the global state of the program. Our technique for evaluating LTL properties is inspired by distributed computation slicing, an approach for abstracting distributed computations with respect to a given predicate. Our monitoring technique is fully decentralized in that each process in the distributed program under inspection maintains a replica of the monitor automaton. Each monitor may maintain a set of possible veriﬁcation verdicts based upon existence of concurrent events. Our experiments on runtime monitoring of a simulated swarm of ﬂying drones show that due to the design of our Algorithm, monitoring overhead grows only in the linear order of the number of processes and events that need to be monitored.},
  language  = {en},
  urldate   = {2021-10-03},
  booktitle = {2015 {IEEE} {International} {Parallel} and {Distributed} {Processing} {Symposium}},
  publisher = {IEEE},
  author    = {Mostafa, Menna and Bonakdarpour, Borzoo},
  month     = may,
  year      = {2015},
  pages     = {494--503},
  file      = {Mostafa and Bonakdarpour - 2015 - Decentralized Runtime Verification of LTL Specific.pdf:/Users/charolastra/Zotero/storage/J2Y5YDS7/Mostafa and Bonakdarpour - 2015 - Decentralized Runtime Verification of LTL Specific.pdf:application/pdf}
}

@article{khoury_automata-based_2021,
  title    = {Automata-based monitoring for {LTL}-{FO}\$\${\textasciicircum}+\$\$},
  volume   = {23},
  issn     = {1433-2779, 1433-2787},
  url      = {https://link.springer.com/10.1007/s10009-020-00566-z},
  doi      = {10.1007/s10009-020-00566-z},
  abstract = {We present an automata-based runtime veriﬁcation procedure for LTL-FO+ properties. LTL-FO+ is an extension of LTL that includes ﬁrst-order quantiﬁcation over bounded variables, thus greatly increasing the expressivity of the language. We show how to construct an automata representation of an LTL-FO+ property which allows runtime veriﬁcation using a breadth-ﬁrst search throughout the automata, and we prove the correctness of the construction. Finally, we introduce Pelota, an automatabased monitor for LTL-FO+, and show empirical results of its use on sample properties. Compared with an existing monitor for LTL-FO+, Pelota exhibits better time and space consumption, especially on memory-intensive properties.},
  language = {en},
  number   = {2},
  urldate  = {2021-10-03},
  journal  = {International Journal on Software Tools for Technology Transfer},
  author   = {Khoury, Raphaël and Hallé, Sylvain and Lebrun, Yannick},
  month    = apr,
  year     = {2021},
  pages    = {137--154},
  file     = {Khoury et al. - 2021 - Automata-based monitoring for LTL-FO\$\$^+\$\$.pdf:/Users/charolastra/Zotero/storage/9PRX9WIN/Khoury et al. - 2021 - Automata-based monitoring for LTL-FO\$\$^+\$\$.pdf:application/pdf}
}

@incollection{hutchison_first-order_2006,
  address   = {Berlin, Heidelberg},
  title     = {First-{Order} {Logic} with {Dependent} {Types}},
  volume    = {4130},
  isbn      = {978-3-540-37187-8 978-3-540-37188-5},
  url       = {http://link.springer.com/10.1007/11814771_33},
  abstract  = {We present DFOL, an extension of classical ﬁrst-order logic with dependent types, i.e., as in Martin-L¨of type theory, signatures may contain type-valued function symbols. A model theory for the logic is given that stays close to the established ﬁrst-order model theory. The logic is presented as an institution, and the logical framework LF is used to deﬁne signatures, terms and formulas. We show that free models over Horn theories exist, which facilitates its use as an algebraic speciﬁcation language, and show that the classical ﬁrst-order axiomatization is complete for DFOL, too, which implies that existing ﬁrst-order theorem provers can be extended. In particular, the axiomatization can be encoded in LF.},
  language  = {en},
  urldate   = {2021-10-03},
  booktitle = {Automated {Reasoning}},
  publisher = {Springer Berlin Heidelberg},
  author    = {Rabe, Florian},
  editor    = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Furbach, Ulrich and Shankar, Natarajan},
  year      = {2006},
  doi       = {10.1007/11814771_33},
  note      = {Series Title: Lecture Notes in Computer Science},
  pages     = {377--391},
  file      = {Rabe - 2006 - First-Order Logic with Dependent Types.pdf:/Users/charolastra/Zotero/storage/B2TINKQ3/Rabe - 2006 - First-Order Logic with Dependent Types.pdf:application/pdf}
}

@article{halle_runtime_2012,
  title    = {Runtime {Enforcement} of {Web} {Service} {Message} {Contracts} with {Data}},
  volume   = {5},
  issn     = {1939-1374},
  url      = {http://ieeexplore.ieee.org/document/5719595/},
  doi      = {10.1109/TSC.2011.10},
  abstract = {An increasing number of popular SOAP web services exhibit a stateful behavior, where a successful interaction is determined as much by the correct format of messages as by the sequence in which they are exchanged with a client. The set of such constraints forms a “message contract” that needs to be enforced on both sides of the transaction; it often includes constraints referring to actual data elements inside messages. We present an algorithm for the runtime monitoring of such message contracts with data parameterization. Their properties are expressed in LTL-FOþ, an extension of Linear Temporal Logic that allows first-order quantification over the data inside a trace of XML messages. An implementation of this algorithm can transparently enforce an LTL-FOþ specification using a small and invisible Java applet. Violations of the specification are reported on-the-fly and prevent erroneous or out-of-sequence XML messages from being exchanged. Experiments on commercial web services from Amazon.com and Google indicate that LTL-FOþ is an appropriate language for expressing their message contracts, and that its processing overhead on sample traces is acceptable both for client-side and server-side enforcement architectures.},
  language = {en},
  number   = {2},
  urldate  = {2021-10-03},
  journal  = {IEEE Transactions on Services Computing},
  author   = {Halle, Sylvain and Villemaire, Roger},
  month    = apr,
  year     = {2012},
  pages    = {192--206},
  file     = {Halle and Villemaire - 2012 - Runtime Enforcement of Web Service Message Contrac.pdf:/Users/charolastra/Zotero/storage/CVA4F44T/Halle and Villemaire - 2012 - Runtime Enforcement of Web Service Message Contrac.pdf:application/pdf}
}

@article{stolz_runtime_2005,
  title    = {Runtime {Verification} of {Concurrent} {Haskell} {Programs}},
  volume   = {113},
  issn     = {15710661},
  url      = {https://linkinghub.elsevier.com/retrieve/pii/S1571066104052600},
  doi      = {10.1016/j.entcs.2004.01.026},
  abstract = {In this article we use model checking techniques to debug Concurrent Haskell programs. LTL formulas specifying assertions or other properties are veriﬁed at runtime. If a run which falsiﬁes a formula is detected, the debugger emits a warning and records the path leading to the violation. It is possible to dynamically add formulas at runtime, giving a degree of ﬂexibility which is not available in static veriﬁcation of source code. We give a comprehensive example of using the new techniques to detect lock-reversal in Concurrent Haskell programs and introduce a template mechanism to deﬁne LTL formulas ranging over an arbitrary set of threads or communication abstractions.},
  language = {en},
  urldate  = {2021-10-03},
  journal  = {Electronic Notes in Theoretical Computer Science},
  author   = {Stolz, Volker and Huch, Frank},
  month    = jan,
  year     = {2005},
  pages    = {201--216},
  file     = {Stolz and Huch - 2005 - Runtime Verification of Concurrent Haskell Program.pdf:/Users/charolastra/Zotero/storage/MXEZ3EJ2/Stolz and Huch - 2005 - Runtime Verification of Concurrent Haskell Program.pdf:application/pdf}
}

@article{sistla_safety_1994,
  title    = {Safety, liveness and fairness in temporal logic},
  volume   = {6},
  issn     = {0934-5043, 1433-299X},
  url      = {http://link.springer.com/10.1007/BF01211865},
  doi      = {10.1007/BF01211865},
  abstract = {In this paper we present syntactic characterization of temporal formulas that express various properties of interest in the verification of concurrent programs. Such a characterization helps us in choosing the right techniques for proving correctness with respect to these properties. The properties that we consider include safety properties, liveness properties and fairness properties. We also present algorithms for checking if a given temporal formula expresses any of these properties.},
  language = {en},
  number   = {5},
  urldate  = {2021-10-03},
  journal  = {Formal Aspects of Computing},
  author   = {Sistla, A. Prasad},
  month    = sep,
  year     = {1994},
  pages    = {495--511},
  file     = {Sistla - 1994 - Safety, liveness and fairness in temporal logic.pdf:/Users/charolastra/Zotero/storage/BHZEC94D/Sistla - 1994 - Safety, liveness and fairness in temporal logic.pdf:application/pdf}
}

@inproceedings{duret-lutz_spot_2004,
  address    = {Volendam, The Netherlands, EU},
  title      = {{SPOT}: an extensible model checking library using transition-based generalized buchi automata},
  isbn       = {978-0-7695-2251-7},
  shorttitle = {{SPOT}},
  url        = {http://ieeexplore.ieee.org/document/1348184/},
  doi        = {10.1109/MASCOT.2004.1348184},
  abstract   = {Spot is a C++ library offering model checking bricks that can be combined and interfaced with third party tools to build a model checker. It relies on Transition-based Generalized Bu¨ chi Automata (TGBA) and does not need to degeneralize these automata to check their emptiness. We motivate the choice of TGBA by illustrating a very simple (yet efﬁcient) translation of LTL into TGBA. We then show how it supports on-the-ﬂy computations, and how it can be extended or integrated in other tools.},
  language   = {en},
  urldate    = {2021-10-03},
  booktitle  = {The {IEEE} {Computer} {Society}'s 12th {Annual} {International} {Symposium} on {Modeling}, {Analysis}, and {Simulation} of {Computer} and {Telecommunications} {Systems}, 2004. ({MASCOTS} 2004). {Proceedings}.},
  publisher  = {IEEE},
  author     = {Duret-Lutz, A. and Poitrenaud, D.},
  year       = {2004},
  pages      = {76--83},
  file       = {Duret-Lutz and Poitrenaud - 2004 - SPOT an extensible model checking library using t.pdf:/Users/charolastra/Zotero/storage/GKUFV7XJ/Duret-Lutz and Poitrenaud - 2004 - SPOT an extensible model checking library using t.pdf:application/pdf}
}

@incollection{actorservice,
  address    = {Berlin, Heidelberg},
  title      = {Actor {Services}: {Modular} {Verification} of {Message} {Passing} {Programs}},
  volume     = {9632},
  isbn       = {978-3-662-49497-4 978-3-662-49498-1},
  shorttitle = {Actor {Services}},
  url        = {http://link.springer.com/10.1007/978-3-662-49498-1_27},
  abstract   = {We present actor services: a novel program logic for deﬁning and verifying response and functional properties of programs which communicate via asynchronous messaging. Actor services can specify how parts of a program respond to messages, both in terms of guaranteed future messages, and relations between the program states in which messages are received and responses sent. These speciﬁcations can be composed, so that end-to-end behaviours of parts of a system can be summarised and reasoned about modularly. We provide inference rules for guaranteeing these properties about future execution states without introducing explicit traces or temporal logics.},
  language   = {en},
  urldate    = {2021-10-03},
  booktitle  = {Programming {Languages} and {Systems}},
  publisher  = {Springer Berlin Heidelberg},
  author     = {Summers, Alexander J. and Müller, Peter},
  editor     = {Thiemann, Peter},
  year       = {2016},
  doi        = {10.1007/978-3-662-49498-1_27},
  note       = {Series Title: Lecture Notes in Computer Science},
  pages      = {699--726},
  file       = {Summers and Müller - 2016 - Actor Services Modular Verification of Message Pa.pdf:/Users/charolastra/Zotero/storage/W7845BDW/Summers and Müller - 2016 - Actor Services Modular Verification of Message Pa.pdf:application/pdf}
}

@article{parthasarathy2018modular,
  title  = {Modular Verification of Response Properties in Protocol-Based Actor Programs},
  author = {Parthasarathy, Gaurav and Summers, Alexander J and M{\"u}ller, Peter},
  year   = {2018}
}

@inproceedings{shafiei2020actor,
  title        = {Actor-Based Runtime Verification with MESA},
  author       = {Shafiei, Nastaran and Havelund, Klaus and Mehlitz, Peter},
  booktitle    = {International Conference on Runtime Verification},
  pages        = {221--240},
  year         = {2020},
  organization = {Springer}
}

@inproceedings{lavery2017actor,
  title        = {An actor-based runtime monitoring system for web and desktop applications},
  author       = {Lavery, Paul and Watanabe, Takuo},
  booktitle    = {2017 18th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)},
  pages        = {385--390},
  year         = {2017},
  organization = {IEEE}
}

@article{cassar2015synchronous,
  title   = {On synchronous and asynchronous monitor instrumentation for actor-based systems},
  author  = {Cassar, Ian and Francalanza, Adrian},
  journal = {arXiv preprint arXiv:1502.03514},
  year    = {2015}
}

@inproceedings{cassar2015runtime,
  title        = {Runtime adaptation for actor systems},
  author       = {Cassar, Ian and Francalanza, Adrian},
  booktitle    = {Runtime Verification},
  pages        = {38--54},
  year         = {2015},
  organization = {Springer}
}

@incollection{emerson1990temporal,
  title={Temporal and modal logic},
  author={Emerson, E Allen},
  booktitle={Formal Models and Semantics},
  pages={995--1072},
  year={1990},
  publisher={Elsevier}
}
